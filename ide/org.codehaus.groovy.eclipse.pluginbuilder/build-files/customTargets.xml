<!--
    Copyright 2003-2009 the original author or authors.
   
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
   
        https://www.apache.org/licenses/LICENSE-2.0
   
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 -->
<project name="Build specific targets and properties" default="noDefault">
	<taskdef name="eclipse.buildScript" classname="org.eclipse.pde.internal.build.tasks.BuildScriptGeneratorTask">
	</taskdef>


	<import file="copyAllProjects.xml" />
	<import file="allElements.xml" />
	<property name="updateSiteDir" value="${buildDirectory}/updateSite" />
	<property file="${buildHome}/build_local_${eclipse.target.version}.properties" />

	<target name="allElements">
		<antcall target="allElementsDelegator" />
	</target>


	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for cvsRoot, package and mapVersionTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles">
	</target>


	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup" depends="init.classpath">
		<antcall target="copyToBuildDirectory" />
	</target>
	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup" depends="fix.compilerResolver">
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: fix.compilerResolver
          now that all the projects are copied, need to make sure that the 
					org.codehaus.groovy.eclispe.compilerResolver bundle works on non-e4 
					builds                  
       - - - - - - - - - - - - - - - - - -->
	<target name="fix.compilerResolver" if="e3.build">
		<!--
		<move file="${pluginsDestDir}/org.codehaus.groovy.eclipse.compilerResolver/e3-build-artifacts/MANIFEST.MF" todir="${pluginsDestDir}/org.codehaus.groovy.eclipse.compilerResolver/META-INF" overwrite="true" />
		<move file="${pluginsDestDir}/org.codehaus.groovy.eclipse.compilerResolver/e3-build-artifacts/build.properties" todir="${pluginsDestDir}/org.codehaus.groovy.eclipse.compilerResolver" overwrite="true" />
		-->
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
	</target>
	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
	</target>
	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
	</target>
	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- Add the correct version number to about.mappings -->
	<!-- ===================================================================== -->
	<target name="preProcess" depends="init.classpath">
		<echo message="Setting groovy mapping property">
		</echo>
		<property file="${buildDirectory}/finalPluginsVersions.properties" />
		<replace file="${buildDirectory}/plugins/org.codehaus.groovy.eclipse/about.mappings" token="@GROOVYVERSION@" value="org.codehaus.groovy" />
		<echo message="Groovy mapping property set">
		</echo>
	</target>
	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
	</target>
	<!-- ===================================================================== -->
	<!-- Steps to do before running assemble. -->
	<!-- ===================================================================== -->
	<target name="preAssemble">
	</target>
	<!-- ===================================================================== -->
	<!-- Steps to do after  running assemble. -->
	<!-- ===================================================================== -->
	<target name="postAssemble">
	</target>
	<!-- ===================================================================== -->
	<!-- Steps to do before/after packaging RCP. -->
	<!-- ===================================================================== -->
	<target name="prePackage">
	</target>

	<target name="postPackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild" unless="no.postBuild" depends="init.classpath">
		<antcall target="createUpdateSite" />
		<antcall target="zipUpdateSite" />
		<antcall target="signUpdateSite" />
		<antcall target="runTests" />
	</target>
	<!-- ===================================================================== -->
	<!-- Run tests. -->
	<!-- ===================================================================== -->
	<target name="runTests" depends="init.classpath">
		<!--if="isRunTests">-->
		<echo message="isRunTests = ${isRunTests}" />
		<property name="automatedTestsHome" location="${buildHome}/build-files/automatedTests" />

		<ant antfile="${automatedTestsHome}/run-tests.xml" target="run" dir="${automatedTestsHome}" />

		<echo message="Finished running tests" />
	</target>



	<!-- - - - - - - - - - - - - - - - - - 
          target: init.classpath                      
         - - - - - - - - - - - - - - - - - -->
	<target name="init.classpath">
		<property name="signer" location="${buildHome}/build-files/sign.sh" />
		<taskdef resource="net/sf/antcontrib/antcontrib.properties">
			<classpath>
				<pathelement path="${buildHome}/build-files/ant-contrib.jar" />
			</classpath>
		</taskdef>
		<path id="jarprocessor.classpath">
			<fileset dir="${build.eclipse.dir}/eclipse/plugins">
				<include name="org.eclipse.equinox.p2.jarprocessor_*.jar" />
			</fileset>
		</path>
		<path id="eclipse.classpath">
			<fileset dir="${build.eclipse.dir}/eclipse/plugins">
				<include name="org.eclipse.equinox.launcher_*.jar" />
			</fileset>
		</path>
	</target>


	<!--======================================================-->
	<!-- Create update site  -->
	<!-- ==================================================== -->

	<target name="createUpdateSite" depends="init.classpath">

		<!-- Create the directory structure -->
		<mkdir dir="${updateSiteDir}/features" />
		<mkdir dir="${updateSiteDir}/plugins" />

		<!-- Build the jar files -->
		<antcall target="allElements">
			<param name="genericTargets" value="${buildHome}/build-files/customTargets.xml" />
			<param name="target" value="updateSiteExport" />
		</antcall>


		<!-- Remove only the SDK feature -->
		<!-- Tests are needed for the STS build -->
		<delete>
			<fileset dir="${updateSiteDir}/features">
				<include name="*sdk*" />
			</fileset>
		</delete>

		<!-- need the site.xml and legal files before we can generate -->
		<copy todir="${updateSiteDir}">
			<fileset dir="${buildHome}/legal">
				<include name="*" />
			</fileset>
		</copy>

		<!-- replace version numbers.  all features use same versions and qualifiers, so just replace all with same version # -->
		<property file="${buildDirectory}/finalFeaturesVersions.ANY_ANY_ANY.properties" />
		<replace file="${updateSiteDir}/site.xml" summary="yes" token="0.0.0.qualifier" value="${org.codehaus.groovy.eclipse.feature}" />

		<!-- Generate metadata -->
		<java fork="true" dir="${updateSiteDir}" classname="org.eclipse.equinox.launcher.Main" maxmemory="256m" classpathref="eclipse.classpath">
			<arg value="-application" />
			<arg value="org.eclipse.equinox.p2.publisher.EclipseGenerator" />
			<arg value="-updateSite" />
			<arg value="${updateSiteDir}" />
			<arg value="-base" />
			<arg value="${updateSiteDir}" />
			<arg value="-site" />
			<arg value="file:${updateSiteDir}/site.xml" />
			<arg value="-metadataRepository" />
			<arg value="file:${updateSiteDir}" />
			<arg value="-metadataRepositoryName" />
			<arg value="Groovy Update Site" />
			<arg value="-artifactRepository" />
			<arg value="file:${updateSiteDir}" />
			<arg value="-artifactRepositoryName" />
			<arg value="Groovy Artifacts" />
			<!--<arg value="-compress"/> -->
			<arg value="-reusePack200Files" />
			<arg value="-append" />
			<arg value="-noDefaultIUs" />
			<jvmarg value="-Xmx128M" />
		</java>

		<!-- fix feature patch version -->
		<!-- Ensure that feature patch can be installed on multiple versions of Eclipse -->
		<!-- See http://aniefer.blogspot.com/2009/06/patching-features-part-2.html -->
		<replace file="${updateSiteDir}/content.xml" summary="yes" token="${orig.jdt.feature.version.range}" value="${new.jdt.feature.version.range}" />

		<echo message="Replace in file ${updateSiteDir}/content.xml attempted on tokens:" />
		<echo message="orig.jdt.feature.version.range=${orig.jdt.feature.version.range}" />
		<echo message="new.jdt.feature.version.range=${new.jdt.feature.version.range}" />
	</target>


	<target name="signUpdateSite" description="Digitally signs the update site" depends="init.classpath">

		<if>
			<equals arg1="${p2.sign}" arg2="true" />

			<then>
				<delete file="${updateSiteDir}/content.xml" />
				<delete file="${updateSiteDir}/artifacts.xml" />

				<java classname="org.eclipse.equinox.internal.p2.jarprocessor.Main" fork="true" classpathref="jarprocessor.classpath" failonerror="true" maxmemory="256m" dir="${updateSiteDir}">
					<arg line="-verbose -processAll -repack -pack -sign ${signer}" />
					<arg line="-outputDir ${updateSiteDir} ${updateSiteDir}" />
				</java>

				<java classname="org.eclipse.equinox.launcher.Main" fork="true" classpathref="eclipse.classpath" failonerror="true" maxmemory="256m" dir="${updateSiteDir}">
					<arg line="-application org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher" />
					<arg line="-source ${updateSiteDir} -metadataRepository file:${updateSiteDir}" />
					<arg line="-artifactRepository file:${updateSiteDir} -metadataRepositoryName '${p2.repository.name}'" />
					<arg line="-artifactRepositoryName '${p2.repository.name}' -reusePackedFiles -reusePack200Files -publishArtifacts" />
				</java>

				<java classname="org.eclipse.equinox.launcher.Main" fork="true" classpathref="eclipse.classpath" failonerror="true" maxmemory="256m" dir="${updateSiteDir}">
					<arg line="-application org.eclipse.equinox.p2.publisher.CategoryPublisher" />
					<arg line="-metadataRepository file:${updateSiteDir}" />
					<arg line="-categoryDefinition file:${updateSiteDir}/site.xml" />
					<arg line="-categoryQualifier org.codehaus.groovy" />
				</java>
			</then>
		</if>
	</target>

	<target name="zipUpdateSite" depends="init.classpath">
		<zip destfile="${updateSiteDir}/../groovy-update-site-${org.codehaus.groovy.eclipse.feature}.zip">
			<fileset dir="${updateSiteDir}">
			</fileset>
		</zip>
	</target>

	<target name="updateSiteExport" depends="init.classpath">
		<ant antfile="build.xml" dir="${buildDirectory}/features/${id}/" target="build.update.jar">
			<property name="feature.destination" value="${updateSiteDir}/features" />
			<property name="plugin.destination" value="${updateSiteDir}/plugins" />
		</ant>
	</target>


	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>
</project>
