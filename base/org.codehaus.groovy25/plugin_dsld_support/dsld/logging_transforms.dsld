/*
 * Copyright 2009-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dsld

[
  [
    annotation: 'groovy.util.logging.Log',
    loggerType: 'java.util.logging.Logger'
  ],
  [
    annotation: 'groovy.util.logging.Commons',
    loggerType: 'org.apache.commons.logging.Log'
  ],
  [
    annotation: 'groovy.util.logging.Log4j',
    loggerType: 'org.apache.log4j.Logger'
  ],
  [
    annotation: 'groovy.util.logging.Log4j2',
    loggerType: 'org.apache.logging.log4j.core.Logger'
  ],
  [
    annotation: 'groovy.util.logging.Slf4j',
    loggerType: 'org.slf4j.Logger'
  ]
].each { data ->
    contribute(currentType(annotations: annotatedBy(data.annotation))) {
        provider = 'Logging AST transform'
        for (annotationNode in annotations) {
            def loggerName = annotationNode.getMember('value') ?: 'log'
            property name: loggerName, type: data.loggerType, isStatic: true // also final, private, transient
        }
    }
}
