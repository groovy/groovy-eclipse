/*
 * Copyright 2011 SpringSource
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dsld

import org.codehaus.groovy.ast.ClassNode;
import org.codehaus.groovy.ast.GenericsType;
import org.codehaus.groovy.ast.FieldNode;

import groovy.transform.IndexedProperty;


/**
 * This is the DSLD for AST Transforms shipped with Groovy-core 1.8.x
 * And this script is not applicable for earlier versions of Groovy
 * 
 * @author Andrew Eisenberg
 * @since 2.5.1
 */


// IndexedProperty
// 1.8 only
currentType(fields : fields(annotatedBy(IndexedProperty))).accept {
    provider = "Indexed property"
    fields.each { FieldNode field ->
       def propertyName = field.name
       propertyName = propertyName.size() == 1 ? propertyName.toUpperCase() : propertyName[0].toUpperCase() + propertyName[1..-1]
       def type = findElementType(field)
       method name: 'get' + propertyName, type: type, params: [index: int]
       method name: 'set' + propertyName, type: 'void', params: [index: int, element: type]
   }
}

def findElementType(FieldNode field) {
   ClassNode type = field.type
   if (type.isArray()) {
       return type.componentType
   }
   GenericsType[] gt = type.genericsTypes
   if (gt && gt.length > 0) {
       gt[0]?.type
   } else {
       Object
   }
}

