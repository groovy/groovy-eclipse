/*
 * Copyright 2009-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.codehaus.groovy.antlr;

import org.codehaus.groovy.antlr.parser.GroovyTokenTypes;

/**
 * This class contains copies of the {@link GroovyTokenTypes} constants in static non-final
 * variables. The reason for this is that we must ensure the contants do not get inlined into
 * greclipse bytecode anywhere outside of the org.codehaus.groovyXX bundles.
 * <p>
 * If those constants where inlined, this would create trouble since the values for the constants
 * are generated by the antlr parser generator and they tend to differ between version. This will
 * break things that uses constants inlined from one version while trying to run against another
 * version.
 *
 * @author Kris De Volder
 */
public class GroovyTokenTypeBridge {

    // Only the GroovyTokenTypes that we use inside Greclipse are represented here.
    // More can be added on an as needed basis.

    public static int ASSIGN               = GroovyTokenTypes.ASSIGN;
    public static int IDENT                = GroovyTokenTypes.IDENT;
    public static int LBRACK               = GroovyTokenTypes.LBRACK;
    public static int LCURLY               = GroovyTokenTypes.LCURLY;
    public static int LPAREN               = GroovyTokenTypes.LPAREN;
    public static int RPAREN               = GroovyTokenTypes.RPAREN;
    public static int RBRACK               = GroovyTokenTypes.RBRACK;
    public static int RCURLY               = GroovyTokenTypes.RCURLY;
    public static int STRING_CTOR_START    = GroovyTokenTypes.STRING_CTOR_START;
    public static int STRING_CTOR_END      = GroovyTokenTypes.STRING_CTOR_END;
    public static int COMMA                = GroovyTokenTypes.COMMA;
    public static int SEMI                 = GroovyTokenTypes.SEMI;
    public static int EOF                  = GroovyTokenTypes.EOF;
    public static int NLS                  = GroovyTokenTypes.NLS;
    public static int WS                   = GroovyTokenTypes.WS;
    public static int ML_COMMENT           = GroovyTokenTypes.ML_COMMENT;
    public static int SL_COMMENT           = GroovyTokenTypes.SL_COMMENT;
    public static int CLOSABLE_BLOCK_OP    = GroovyTokenTypes.CLOSABLE_BLOCK_OP;
    public static int LITERAL_as           = GroovyTokenTypes.LITERAL_as;
    public static int GT                   = GroovyTokenTypes.GT;
    public static int LT                   = GroovyTokenTypes.LT;
    public static int GE                   = GroovyTokenTypes.GE;
    public static int LE                   = GroovyTokenTypes.LE;
    public static int LITERAL_if           = GroovyTokenTypes.LITERAL_if;
    public static int LITERAL_else         = GroovyTokenTypes.LITERAL_else;
    public static int LITERAL_for          = GroovyTokenTypes.LITERAL_for;
    public static int LITERAL_switch       = GroovyTokenTypes.LITERAL_switch;
    public static int LITERAL_while        = GroovyTokenTypes.LITERAL_while;
    public static int LITERAL_class        = GroovyTokenTypes.LITERAL_class;
    public static int LITERAL_interface    = GroovyTokenTypes.LITERAL_interface;
    public static int LITERAL_public       = GroovyTokenTypes.LITERAL_public;
    public static int LITERAL_private      = GroovyTokenTypes.LITERAL_private;
    public static int LITERAL_protected    = GroovyTokenTypes.LITERAL_protected;
    public static int LITERAL_assert       = GroovyTokenTypes.LITERAL_assert;
    public static int LITERAL_def          = GroovyTokenTypes.LITERAL_def;
    public static int LITERAL_transient    = GroovyTokenTypes.LITERAL_transient;
    public static int LITERAL_native       = GroovyTokenTypes.LITERAL_native;
    public static int LITERAL_threadsafe   = GroovyTokenTypes.LITERAL_threadsafe;
    public static int LITERAL_synchronized = GroovyTokenTypes.LITERAL_synchronized;
    public static int LITERAL_volatile     = GroovyTokenTypes.LITERAL_volatile;
    public static int LITERAL_static       = GroovyTokenTypes.LITERAL_static;
    public static int LITERAL_package      = GroovyTokenTypes.LITERAL_package;
    public static int LITERAL_extends      = GroovyTokenTypes.LITERAL_extends;
    public static int LITERAL_implements   = GroovyTokenTypes.LITERAL_implements;
    public static int LITERAL_return       = GroovyTokenTypes.LITERAL_return;
    public static int LITERAL_void         = GroovyTokenTypes.LITERAL_void;
    public static int LITERAL_boolean      = GroovyTokenTypes.LITERAL_boolean;
    public static int LITERAL_byte         = GroovyTokenTypes.LITERAL_byte;
    public static int LITERAL_char         = GroovyTokenTypes.LITERAL_char;
    public static int LITERAL_short        = GroovyTokenTypes.LITERAL_short;
    public static int LITERAL_int          = GroovyTokenTypes.LITERAL_int;
    public static int LITERAL_float        = GroovyTokenTypes.LITERAL_float;
    public static int LITERAL_long         = GroovyTokenTypes.LITERAL_long;
    public static int LITERAL_double       = GroovyTokenTypes.LITERAL_double;
    public static int ABSTRACT             = GroovyTokenTypes.ABSTRACT;
    public static int NOT_EQUAL            = GroovyTokenTypes.NOT_EQUAL;
    public static int EQUAL                = GroovyTokenTypes.EQUAL;
    public static int NUM_INT              = GroovyTokenTypes.NUM_INT;
    public static int NUM_FLOAT            = GroovyTokenTypes.NUM_FLOAT;
    public static int NUM_LONG             = GroovyTokenTypes.NUM_LONG;
    public static int NUM_DOUBLE           = GroovyTokenTypes.NUM_DOUBLE;
    public static int NUM_BIG_INT          = GroovyTokenTypes.NUM_BIG_INT;
    public static int NUM_BIG_DECIMAL      = GroovyTokenTypes.NUM_BIG_DECIMAL;
    public static int STRING_LITERAL       = GroovyTokenTypes.STRING_LITERAL;
    public static int COLON                = GroovyTokenTypes.COLON;
}
