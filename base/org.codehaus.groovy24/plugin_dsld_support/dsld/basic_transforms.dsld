/*
 * Copyright 2009-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dsld

import groovy.transform.*
import org.codehaus.groovy.ast.*
import org.codehaus.groovy.ast.expr.*
import org.codehaus.groovy.runtime.MetaClassHelper

// http://groovy-lang.org/metaprogramming.html#_available_ast_transformations

//@groovy.lang.Category
contribute(currentType(annos: annotatedBy(Category))) {
    provider = '{@link groovy.lang.Category Category} AST transform'
    for (AnnotationNode node : annos) {
        Expression value = node.getMember('value')
        for (MethodNode meth : currentType.methods.findAll {
            it.isStatic() && it.parameters.length >= 1 && it.parameters[0].name == '$this' && it.parameters[0].type == value.type
        }) {
            Map<String, ClassNode> parms = params(meth)
            parms = [self: parms['$this'], *: parms.subMap(parms.keySet().tail())]
            method name: meth.name, type: meth.returnType, params: parms, isStatic: true
        }
    }
}

//@groovy.lang.Delegate
contribute(currentType(fields: fields(annotatedBy(Delegate)))) {
    provider = '{@link groovy.lang.Delegate Delegate} AST transform'
    for (FieldNode field : fields) {
        delegatesTo type: field.type
    }
}

//@groovy.lang.Grab, et al.

//@groovy.lang.Lazy

//@groovy.lang.Mixin
contribute(currentType(mixins: annotatedBy(Mixin))) {
    provider = '{@link groovy.lang.Mixin Mixin} AST transform'
    for (AnnotationNode mixin : mixins) {
        Expression expr = mixin.getMember('value')
        if (expr instanceof ClassExpression) {
            delegatesTo type: expr.type
        } else if (expr instanceof ListExpression) {
            for (Expression e : expr.expressions) {
                delegatesTo type: e.type
            }
        }
    }
}

//@groovy.lang.Newify
contribute(enclosingClass(annos: annotatedBy(Newify)) | enclosingField(annos: annotatedBy(Newify)) | enclosingMethod(annos: annotatedBy(Newify)) | assignedVariable(annos: annotatedBy(Newify))) {
    provider = '{@link groovy.lang.Newify Newify} AST transform'

    def addNewifyMethods = { ClassNode type, String name = type.nameWithoutPackage ->
        for (ConstructorNode ctor : type.declaredConstructors.findAll { !it.isPrivate() }) {
            method name: name, params: params(ctor), type: type, declaringType: type, isStatic: true
        }
    }

    for (AnnotationNode node : annos) {
        // check for Ruby style (i.e. auto=true)
        Boolean auto = node.getMember('auto')?.value
        if (auto == null) {
            auto = Newify.getMethod('auto').defaultValue
        }
        if (auto && currentNode instanceof PropertyExpression &&
                currentNode.objectExpression instanceof ClassExpression) {
            addNewifyMethods(currentType, 'new');
        }

        // check for Python style (i.e. value=Type(s))
        Expression expr = node.getMember('value')
        if (expr instanceof ClassExpression) {
            addNewifyMethods(expr.type)
        } else if (expr instanceof ListExpression) {
            for (Expression e : expr.expressions) {
                addNewifyMethods(e.type)
            }
        }
    }
}

//@groovy.lang.Singleton
contribute(currentType(annos: annotatedBy(Singleton))) {
    provider = '{@link groovy.lang.Singleton Singleton} AST transform'
    AnnotationNode node = annos[0]
    String propertyName = node.getMember('property')?.text ?: 'instance'
    String accessorName = 'get' + MetaClassHelper.capitalize(propertyName)

    method name: accessorName, type: currentType, isStatic: true
    property name: propertyName, type: currentType, isStatic: true
}

//------------------------------------------------------------------------------

//@groovy.transform.AnnotationCollector

//@groovy.transform.ASTTest

//@groovy.transform.AutoClone
contribute(currentType(annotatedBy(AutoClone))) {
    provider = '{@link groovy.transform.AutoClone AutoClone} AST transform'
    delegatesTo type: Cloneable
}

//@groovy.transform.AutoExternalize
contribute(enclosingClass(annotatedBy(AutoExternalize))) {
    provider = '{@link groovy.transform.AutoExternalize AutoExternalize} AST transform'
    delegatesTo type: Externalizable
}

//@groovy.transform.BaseScript

//@groovy.transform.Canonical, et al.

//@groovy.transform.Field

//@groovy.transform.IndexedProperty
contribute(currentType(fields: fields(annotatedBy(IndexedProperty)))) {
    provider = '{@link groovy.transform.IndexedProperty IndexedProperty} AST transform'
    for (FieldNode field : fields) {
        String propertyName = MetaClassHelper.capitalize(field.name)

        // field must be an array or collection; get its component type
        ClassNode type
        if (type.isArray()) {
            type = type.componentType
        } else {
            GenericsType[] gt = type.genericsTypes
            if (gt && gt.length > 0) {
                type = gt[0]?.type
            } else {
                type = ClassHelper.OBJECT_TYPE
            }
        }

        method name: 'get' + propertyName, type: type, params: [index: int]
        method name: 'set' + propertyName, type: void, params: [index: int, element: type]
    }
}

//@groovy.transform.Immutable

//@groovy.transform.InheritConstructors

//@groovy.transform.Memoized

//@groovy.transform.NotYetImplemented

//@groovy.transform.PackageScope

//@groovy.transform.SelfType
contribute(bind(clazz: enclosingClass(annos: annotatedBy(SelfType)))) {
    provider = '{@link groovy.transform.SelfType SelfType} AST transform'
    if (org.codehaus.groovy.transform.trait.Traits.isTrait(clazz[0])) {
        for (AnnotationNode node : annos) {
            Expression expr = node.getMember('value')
            if (expr instanceof ClassExpression) {
                delegatesTo type: expr.type
            } else if (expr instanceof ListExpression) {
                for (Expression e : expr.expressions) {
                    delegatesTo type: e.type
                }
            }
        }
    }
}

//@groovy.transform.Sortable
contribute(currentType(annotatedBy(Sortable))) {
    provider = '{@link groovy.transform.Sortable Sortable} AST transform'
    delegatesTo type: "java.lang.Comparable<${currentType.name}>"
    for (MethodNode node : currentType.methods.findAll { MethodNode mn ->
        mn.isPublic() && mn.isStatic() && mn.name.startsWith('comparatorBy') && !mn.parameters
    }) {
        method name: node.name, type: node.returnType, isStatic: true
    }
}

//@groovy.transform.Synchronized, et al.

//@groovy.transform.TailRecursive
