/*
 * Copyright 2009-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dsld

import groovy.transform.*
import org.codehaus.groovy.ast.*
import org.codehaus.groovy.ast.expr.*
import org.codehaus.groovy.runtime.MetaClassHelper

/**
 * DSLD for AST Transforms shipped with Groovy 1.8+
 *
 * @author Andrew Eisenberg
 * @since 2.5.1
 */

//@groovy.transform.IndexedProperty
contribute(currentType(fields: fields(annotatedBy(IndexedProperty)))) {
    provider = 'IndexedProperty AST transform'
    for (FieldNode field : fields) {
        String propertyName = MetaClassHelper.capitalize(field.name)

        // field must be an array or collection; get its component type
        ClassNode type
        if (type.isArray()) {
            type = type.componentType
        } else {
            GenericsType[] gt = type.genericsTypes
            if (gt && gt.length > 0) {
                type = gt[0]?.type
            } else {
                type = ClassHelper.OBJECT_TYPE
            }
        }

        method name: 'get' + propertyName, type: type, params: [index: int]
        method name: 'set' + propertyName, type: void, params: [index: int, element: type]
    }
}

//@groovy.transform.SelfType
contribute(bind(clazz: enclosingClass(annos: annotatedBy(SelfType)))) {
    provider = 'SelfType AST transform'
    if (org.codehaus.groovy.transform.trait.Traits.isTrait(clazz[0])) {
        for (AnnotationNode node : annos) {
            Expression expr = node.getMember('value')
            if (expr instanceof ClassExpression) {
                delegatesTo type: expr.type
            } else if (expr instanceof ListExpression) {
                for (Expression e : expr.expressions) {
                    delegatesTo type: e.type
                }
            }
        }
    }
}

//@groovy.transform.Sortable
contribute(currentType(annotatedBy(Sortable))) {
    provider = 'Sortable AST transform'
    //delegatesTo type: "java.lang.Comparable<${currentType.name}>"
    for (MethodNode node : currentType.methods.findAll { MethodNode mn ->
        mn.isPublic() && mn.isStatic() && mn.name.startsWith('comparatorBy') && !mn.parameters
    }) {
        method name: node.name, type: node.returnType, isStatic: true
    }
}
