/*
 * Copyright 2011 SpringSource and others
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dsld

import org.codehaus.groovy.ast.ClassHelper
import org.codehaus.groovy.ast.ClassNode
import org.codehaus.groovy.ast.FieldNode
import org.codehaus.groovy.ast.GenericsType
import org.codehaus.groovy.ast.MethodNode
import groovy.beans.ListenerList

/**
 * Hackergarten contribution
 *
 * @author Lukasz Pielak
 * @author Max Rydahl Andersen
 * @author Andres Almiray
 */
contribute(currentType(fields : fields(annotatedBy(ListenerList)))) {
    provider = "ListenerList AST Transform"

    fields.each { field ->
        def propertyName = field.name
        propertyName = propertyName.size() == 1 ? propertyName.toUpperCase() : propertyName[0].toUpperCase() + propertyName[1..-1]
        def type = findElementType(field)

        def shortType = getShortName(type.name)
        method name: 'add' + shortType, type: 'void', params: [listener: type], doc: 'Add ' + shortType + ' listener'
        method name: 'remove' + shortType, type: 'void', params: [listener: type], doc: 'Remove ' + shortType + ' listener'

        // TODO array types does not work, result in completions for plain Object.
        method name: 'get' + shortType + 's', type: "type.name"+[], doc: 'Get ' + shortType + ' listeners'

        findElementType(field).methods.each { MethodNode m ->
            method name: 'fire' + m.name.capitalize(), type: "void", params: m.parameters.inject([:]){ map, param ->
                map[(param.name)] = param.type
                map
            }, doc: 'fire the ' + m.name + ' event'
        }
    }
}

private getShortName(String className){
    int i = className.lastIndexOf(".")
    if (i > -1){
        className = className.substring(i+1, className.length())
    }
    className
}

private ClassNode findElementType(FieldNode field) {
    ClassNode type = field.type
    if (type.isArray()) {
        return type.componentType
    }
    GenericsType[] gt = type.genericsTypes
    if (gt && gt.length > 0) {
        gt[0]?.type
    } else {
        ClassHelper.OBJECT_TYPE
    }
}
