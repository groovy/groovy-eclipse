/*
 * Copyright 2009-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dsld

import org.codehaus.groovy.ast.*
import org.codehaus.groovy.ast.expr.*
import org.codehaus.groovy.runtime.MetaClassHelper

/**
 * DSLD for AST Transforms shipped with Groovy
 *
 * @author Andrew Eisenberg
 * @since 2.5.1
 */

//@groovy.lang.Delegate
contribute(currentType(fields: fields(annotatedBy(Delegate)))) {
    provider = 'Delegate AST transform'
    for (FieldNode field : fields) {
        delegatesTo type: field.type
    }
}

//@groovy.lang.Mixin
contribute(currentType(mixins: annotatedBy(Mixin))) {
    provider = 'Mixin AST transform'
    for (AnnotationNode mixin : mixins) {
        Expression expr = mixin.getMember('value')
        if (expr instanceof ClassExpression) {
            delegatesTo type: expr.type
        } else if (expr instanceof ListExpression) {
            for (Expression e : expr.expressions) {
                delegatesTo type: e.type
            }
        }
    }
}

//@groovy.lang.Newify
contribute(enclosingClass(annos: annotatedBy(Newify)) | enclosingField(annos: annotatedBy(Newify)) | enclosingMethod(annos: annotatedBy(Newify)) | assignedVariable(annos: annotatedBy(Newify))) {
    provider = 'Newify AST transform'

    def addNewifyMethods = { ClassNode type, String name = type.nameWithoutPackage ->
        for (ConstructorNode ctor : type.declaredConstructors.findAll { !it.isPrivate() }) {
            method name: name, params: params(ctor), type: type, declaringType: type, isStatic: true
        }
    }

    for (AnnotationNode node : annos) {
        // check for Ruby style (i.e. auto=true)
        Boolean auto = node.getMember('auto')?.value
        if (auto == null) {
            auto = Newify.getMethod('auto').defaultValue
        }
        if (auto && currentNode instanceof PropertyExpression &&
                currentNode.objectExpression instanceof ClassExpression) {
            addNewifyMethods(currentType, 'new');
        }

        // check for Python style (i.e. value=Type(s))
        Expression expr = node.getMember('value')
        if (expr instanceof ClassExpression) {
            addNewifyMethods(expr.type)
        } else if (expr instanceof ListExpression) {
            for (Expression e : expr.expressions) {
                addNewifyMethods(e.type)
            }
        }
    }
}

//@groovy.lang.Singleton
contribute(currentType(annos: annotatedBy(Singleton))) {
    provider = 'Singleton AST transform'
    AnnotationNode node = annos[0]
    String propertyName = node.getMember('property')?.text ?: 'instance'
    String accessorName = 'get' + MetaClassHelper.capitalize(propertyName)

    method name: accessorName, type: currentType, isStatic: true
    property name: propertyName, type: currentType, isStatic: true
}
