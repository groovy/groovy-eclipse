/*
 * Copyright 2011 SpringSource
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dsld

import org.codehaus.groovy.ast.AnnotationNode
import org.codehaus.groovy.ast.expr.ClassExpression
import org.codehaus.groovy.ast.expr.Expression
import org.codehaus.groovy.ast.expr.ListExpression


/**
 * This is the DSLD for AST Transforms shipped with Groovy-core 1.8.x
 * 
 * @author Andrew Eisenberg
 * @since 2.5.1
 */


// Singleton
currentType(annotatedBy(Singleton)).accept {
    provider = "Singleton AST Transform"
    method name:"getInstance", type:currentType, declaringType:currentType, isStatic:true
    property name:"instance", type:currentType, declaringType:currentType, isStatic:true
}

// Delegate
currentType(fields : fields(annotatedBy(Delegate))).accept {
    provider = "Delegate AST Transform"
    for (field in fields) {
        delegatesTo field
    }
}

// Mixin
currentType(mixins: annotatedBy(Mixin)).accept {
    provider = "Mixin AST Transform"
    for (AnnotationNode mixin in mixins) {
        Expression expr = mixin.getMember("value")
        if (expr instanceof ClassExpression) {
            delegatesTo expr
        } else if (expr instanceof ListExpression) {
            for (Expression ex in expr?.expressions) {
                delegatesTo ex
            }
        }
    }
}