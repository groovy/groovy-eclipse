<?xml version="1.0" encoding="UTF-8"?>

<!--
  To use this script:
    1) Clone Groovy-Eclipse from git and set up a workspace with at least these projects:
        - org.codehaus.groovyXX
        - org.eclipse.jdt.core
        - org.eclipse.jdt.groovy.core
        - org.codehaus.groovy.eclipse.ant
    2) Update build.properties to point to the appropriate locations and versions
    3) Comment/uncomment do-24-build, do-25-build or ... (exactly one of these must be uncommented at once)
    4a) Run `package` to build the groovy-eclipse-batch jars and pom
     OR
    4b) Run `install` to build groovy-eclipse-batch artifacts and install them locally
-->
<project name="groovy-eclipse-batch" basedir="." default="package">

    <property file="build.properties"/>
    <property name="build.dir" location="${basedir}/build"/>
    <property name="maven.dir" location="${basedir}/maven"/>
    <property name="stage.dir" location="${build.dir}/stage"/>


    <target name="clean">
        <delete dir="${build.dir}" quiet="true"/>
    </target>


    <target name="package" depends="-extract" description="Create artifacts for deployment">
        <!-- copy pom.xml and inject version -->
        <copy file="${maven.dir}/pom.xml" tofile="${build.dir}/${maven.pom}"/>
        <replace file="${build.dir}/${maven.pom}" token="REPLACE_WITH_VERSION" value="${version}"/>

        <!-- create main artifact from stage directory -->
        <jar destfile="${build.dir}/${main.jar}">
            <fileset dir="${stage.dir}">
                <exclude name="**/*.g"/>
                <exclude name="**/*.g4"/>
                <exclude name="**/*.groovy"/>
                <exclude name="**/*.html"/>
                <exclude name="**/*.jar"/>
                <exclude name="**/*.java"/>
                <exclude name="**/*.smap"/>

                <exclude name=".api_description"/>
                <exclude name=".options"/>
                <exclude name="about_files/**"/>
                <exclude name="ant_tasks/**"/>
                <exclude name="package-list"/>
                <exclude name="plugin.*"/>
                <exclude name="script.js"/>
                <exclude name="stylesheet.css"/>
                <exclude name="systembundle.properties"/>
                <exclude name="META-INF/*.properties"/>
                <exclude name="META-INF/eclipse.inf"/>
                <exclude name="META-INF/INDEX.LIST"/>
                <exclude name="META-INF/maven/**"/>
                <exclude name="META-INF/*.RSA"/>
                <exclude name="META-INF/*.SF"/>
            </fileset>
            <manifest>
                <attribute name="Implementation-Version" value="${version}" />
                <attribute name="Implementation-Vendor" value="Pivotal Software, Inc." />
                <attribute name="Main-Class" value="org.eclipse.jdt.internal.compiler.batch.Main" />
            </manifest>
        </jar>

        <!-- create javadoc artifact -->
        <jar destfile="${build.dir}/${javadoc.jar}">
            <!-- TODO -->
        </jar>

        <!-- create sources artifact -->
        <jar destfile="${build.dir}/${sources.jar}">
            <fileset dir="${git.repo.loc}/jdt-patch/${jdt.patch.target}/org.eclipse.jdt.core/batch">
                <include name="**/BatchCompiler.java" />
                <include name="**/Main.java" />
            </fileset>
            <fileset dir="${stage.dir}">
                <include name="**/*.groovy" />
                <include name="**/*.java" />
            </fileset>
        </jar>
    </target>


    <target name="install" depends="package" description="Install artifacts to local repository" xmlns:artifact="urn:maven-artifact-ant">
        <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant">
            <classpath>
                <fileset file="${maven.dir}/maven-ant-tasks-*.jar"/>
            </classpath>
        </typedef>

        <echo message="Installing ${ant.project.name} artifacts into local repository"/>

        <artifact:pom file="${build.dir}/${maven.pom}" id="the_pom"/>
        <artifact:install file="${build.dir}/${main.jar}">
            <attach file="${build.dir}/${javadoc.jar}" type="jar" classifier="javadoc"/>
            <attach file="${build.dir}/${sources.jar}" type="jar" classifier="sources"/>
            <pom refid="the_pom"/>
        </artifact:install>
    </target>


    <target name="-extract" depends="-init" description="extract the contents of all jars and copy them to the stage location">
        <mkdir dir="${build.dir}"/>
        <delete dir="${stage.dir}" quiet="true"/>
        <mkdir dir="${stage.dir}"/>

        <unzip dest="${stage.dir}">
            <fileset refid="orig.plugin.jars"/>
            <fileset refid="orig.groovy.jars"/>
        </unzip>

        <!-- Overwrite existing with classes from workspace bin folders-->
        <copy todir="${stage.dir}">
            <fileset refid="jdt.groovy.core.class.files"/>
            <fileset refid="jdt.core.class.files"/>
            <fileset refid="groovy.core.class.files"/>
            <fileset refid="groovy.trace.class.files"/>
            <fileset refid="ant.groovy.class.files"/>
        </copy>

        <!-- now unzip the jdt compiler adapter jar. It's a jar within a jar. -->
        <unzip dest="${stage.dir}" src="${git.repo.loc}/jdt-patch/${jdt.patch.target}/org.eclipse.jdt.core/jdtCompilerAdapter.jar"/>
    </target>


    <target name="-init" depends="-fail-if-no-version-specified,-init24,-init25,-init30">
        <fileset dir="${eclipse.install.plugins}" id="orig.plugin.jars">
            <include name="org.eclipse.core.contenttype_*.jar"/>
            <include name="org.eclipse.core.filesystem_*.jar"/>
            <include name="org.eclipse.core.jobs_*.jar"/>
            <include name="org.eclipse.core.resources_*.jar"/>
            <include name="org.eclipse.core.runtime_*.jar"/>
            <include name="org.eclipse.equinox.common_*.jar"/>
            <include name="org.eclipse.equinox.preferences_*.jar"/>
            <include name="org.eclipse.jdt.compiler.apt_*.jar"/>
            <include name="org.eclipse.osgi_*.jar"/>
            <include name="org.eclipse.text_*.jar"/>
        </fileset>

        <fileset dir="${git.repo.loc}/base" id="orig.groovy.jars">
            <include name="${groovy.folder}/lib/groovy*.jar"/>
            <exclude name="${groovy.folder}/lib/groovy-test*.jar"/>
            <!-- include the non-locking classloader w/ sources -->
            <include name="org.eclipse.jdt.groovy.core/nlcl*.jar"/>
        </fileset>
        <fileset dir="${git.repo.loc}/base/org.eclipse.jdt.groovy.core/bin" id="jdt.groovy.core.class.files">
            <include name="**/*.*"/>
        </fileset>
        <fileset dir="${git.repo.loc}/jdt-patch/${jdt.patch.target}/org.eclipse.jdt.core/bin" id="jdt.core.class.files">
            <include name="**/*.*"/>
        </fileset>
        <!-- ensure that this comes after the core groovy compiler files because the groovy-eclipse.jar must overwrite the groovy.jar -->
        <fileset dir="${git.repo.loc}/base/${groovy.folder}/bin" id="groovy.core.class.files">
            <include name="**/*.*"/>
        </fileset>
        <fileset dir="${git.repo.loc}/base/${groovy.folder}/bin-trace" id="groovy.trace.class.files">
            <include name="**/*.*"/>
        </fileset>
        <fileset dir="${git.repo.loc}/ide/org.codehaus.groovy.eclipse.ant/bin-ant" id="ant.groovy.class.files">
            <include name="**/*.*"/>
        </fileset>

        <property name="main.jar" value="${ant.project.name}-${version}.jar"/>
        <property name="maven.pom" value="${ant.project.name}-${version}.pom"/>
        <property name="javadoc.jar" value="${ant.project.name}-${version}-javadoc.jar"/>
        <property name="sources.jar" value="${ant.project.name}-${version}-sources.jar"/>
    </target>


    <target name="-init24" if="do-24-build">
        <echo message="Building Groovy 2.4.x"/>
        <property name="version" value="${version2.4}"/>
        <property name="groovy.folder" value="org.codehaus.groovy24"/>
    </target>


    <target name="-init25" if="do-25-build">
        <echo message="Building Groovy 2.5.x"/>
        <property name="version" value="${version2.5}"/>
        <property name="groovy.folder" value="org.codehaus.groovy25"/>
    </target>


    <target name="-init30" if="do-30-build">
        <echo message="Building Groovy 3.0.x"/>
        <property name="version" value="${version3.0}"/>
        <property name="groovy.folder" value="org.codehaus.groovy30"/>
    </target>


    <target name="-check-build-version">
        <property file="build.properties"/>
        <condition property="no-version-specified">
            <not>
            <or>
                <isset property="do-24-build"/>
                <isset property="do-25-build"/>
                <isset property="do-30-build"/>
            </or>
            </not>
        </condition>
    </target>


    <target name="-fail-if-no-version-specified" depends="-check-build-version" if="no-version-specified">
        <fail message="You must set exactly one of do-XX-build to specify a groovy version to build"/>
    </target>

</project>
